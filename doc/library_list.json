{"libraries":[{"packageName":"","name":"dart:core","qualifiedName":"dart:core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","version":"1.10.1"},{"packageName":"getscript","name":"getscript","qualifiedName":"getscript/getscript","preview":"<p>The getScript library.\nLoads a script with DOM access, if not already loaded.</p>","packageIntro":"<h1>getScript</h1>\n<p>Dynamic code loading for dart scripts, similar to jQuery's <code>getScript()</code>.\nThe loaded modules have full access to the DOM, but no access to\nthe code of other modules.</p>\n<h2>Usage</h2>\n<p>A simple usage example:</p>\n<pre><code>import 'package:getScript/getScript.dart';\n\nmain() {\n  String name = 'one.dart';\n  getScript(Uri.parse(name));\n}\n</code></pre>\n<p>Returns a <code>Future&lt;ScriptElement&gt;</code>\nIf the script is already loaded, getScript() will not attempt to load it\nagain, so it can be safely used multiple times without triggering superfluous\nrequests.</p>\n<h2>Features and bugs</h2>\n<p>Currently, a Future is returned to indicate that the module has loaded only\nwhen running in Javascript.\nAs a workaround during development in Dartium, you can dispatch a custom \nDOM event from the module and listen for it in the main script.</p>\n<p>Please file feature requests and bugs at the <a href=\"https://www.github.com/GeKorm/getScript/issues\">issue tracker</a>.</p>","version":"getscript-0.0.1"}],"introduction":"","filetype":"json","sdkVersion":"1.10.1","start-page":"getscript"}